- hosts: nginx   
  become: true
  tasks:
    # - name: Install nginx web server
    #   yum: name=nginx state=installed update_cache=true

    # - name: Install PHP Remi Repository
    #   yum: name=http://rpms.remirepo.net/enterprise/remi-release-7.rpm update_cache=yes state=latest
    
    # - name: Installing php and extensions
    #   yum:
    #     enablerepo: "remi,remi-php70"
    #     name:
    #       - php
    #       - php-common
    #       - php-cli
    #       - php-gd
    #       - php-curl 
    #       - php-mysqlnd
    #       - php-fpm
    #       - php-mysqli
    #       - php-mbstring
    #       - php-xml 
    #       - php-xmlrpc 
    #       - php-soap
    #       - php-intl
    #       - php-zip
    #     state: latest

    # - name: Install Mysql Repository
    #   yum: name=https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm update_cache=yes state=latest

    # - name: Installing mysql and extensions
    #   yum:
    #     name:
    #       - mysql-server
    # - name: Install MySQL-python, this is required for the task remove anonymous user
    #   yum: 
    #     name: 
    #       - MySQL-python 
    #     state: present

    # - name: Start mysqld service
    #   systemd: name=mysqld state=started enabled=yes
      
    # - name: get root password
    #   shell: "grep 'A temporary password is generated for root@localhost' /var/log/mysqld.log | awk -F ' ' '{print $(NF)}'"
    #   register: root_password
      
    # - name: update expired root user password
    #   command: mysql --user root --password={{ root_password.stdout }} --connect-expired-password --execute="ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ root_password.stdout }}';"  
        
    # - name: Create MySQL user
    #   mysql_user:
    #     login_host: 'localhost'
    #     login_user: 'root'
    #     login_password: '{{ root_password.stdout }}'
    #     name: 'wpuser'
    #     password: 'password'
    #     state: present
    #     login_unix_socket: /var/lib/mysql/mysql.sock

    # # - name: Create mysql user
    # #   mysql_user:
    # #     name: "wpuser"
    # #     password: "password"
    # #     priv: '*.*:ALL'
    # #     host: '%'
    # #     state: present
    # #     login_unix_socket: /var/run/mysqld/mysqld.sock
 
    # - name: Creates database for WordPress
    #   mysql_db:
    #     name: "wpdb"
    #     state: present
    #     login_user: root
    #     login_password: '{{ root_password.stdout }}'       

    # - name: Download and unpack latest WordPress
    #   unarchive:
    #     src: https://wordpress.org/latest.tar.gz
    #     dest: "/usr/share/nginx/html"
    #     remote_src: yes
    #     creates: "/usr/share/nginx/html/wordpress/"
 
    # - name: Set ownership
    #   file:
    #     path: "/usr/share/nginx/html/"
    #     state: directory
    #     recurse: yes
    #     owner: nginx
    #     group: nginx
 
    # - name: Set permissions for directories
    #   shell: "usr/share/nginx/html/ -type d -exec chmod 750 {} \\;"
 
    # - name: Set permissions for files
    #   shell: "/usr/bin/find usr/share/nginx/html/ -type f -exec chmod 640 {} \\;"

    - name: Change file ownership, group and permissions
      ansible.builtin.file:
        path: usr/share/nginx/html
        state: directory
        recurse: yes
        mode: '777'
 
    - name: Copy sample config file
      command: mv /usr/share/nginx/html/wordpress/wp-config-sample.php /usr/share/nginx/html/wordpress/wp-config.php creates=/usr/share/nginx/html/wordpress/wp-config.php
      become: yes
 
    - name: Update WordPress config file
      lineinfile:
        path: "/usr/share/nginx/html/wordpress/wp-config.php"
        regexp: "{{item.regexp}}"
        line: "{{item.line}}"
      with_items:
        - {'regexp': "define\\( 'DB_NAME', '(.)+' \\);", 'line': "define( 'DB_NAME', 'wpdb' );"}
        - {'regexp': "define\\( 'DB_USER', '(.)+' \\);", 'line': "define( 'DB_USER', 'wpuser' );"}
        - {'regexp': "define\\( 'DB_PASSWORD', '(.)+' \\);", 'line': "define( 'DB_PASSWORD', 'password' );"}
     
    - name: Restart httpd service
      systemd: name=httpd state=restarted
      become: yes